#include "TROOT.h"
#include "TFile.h"
#include "TTree.h"
#include "TBrowser.h"
#include "TH2.h"
#include "TRandom.h"
#include "Riostream.h"
#include <iostream>
#include <math.h>

float d_to_rad(float degree);

void Erm_gamma(){

	int   maxgamma = 500;
	int   ngammas;
	float pfo_gamma_theta[maxgamma],mcr_gamma_theta[maxgamma];
	float pfo_gamma_e[maxgamma],mcr_gamma_e[maxgamma];
	float pfo_gamma_phi[maxgamma],mcr_gamma_phi[maxgamma];
	//bool  mcr_isCreatedinsim[maxgamma];

	TFile *f    = new TFile("MP.root","READ");
	TTree *tree = (TTree*)f->Get("evtdata");

	int nEntry = tree->GetEntries();

	//set branch address
	tree->SetBranchAddress("ngammas",        &ngammas       );
	tree->SetBranchAddress("pfo_gamma_theta",pfo_gamma_theta);
	tree->SetBranchAddress("mcr_gamma_theta",mcr_gamma_theta);
	tree->SetBranchAddress("pfo_gamma_e",    pfo_gamma_e    );
	tree->SetBranchAddress("mcr_gamma_e",    mcr_gamma_e    );
	tree->SetBranchAddress("pfo_gamma_phi",  pfo_gamma_phi  );
	tree->SetBranchAddress("mcr_gamma_phi",  mcr_gamma_phi  );

	// canvas
	TCanvas *c1 = new TCanvas("c1","Erc",700,800);
	TCanvas *c2 = new TCanvas("c2","Emc",700,800);
	TCanvas *c3 = new TCanvas("c3","Erm",700,800);

	// histograms
	TH1F *Erc_hist    = new TH1F("erc_hist","E_{rc} from endcap to plug",100,0.,20.);
	TH1F *Emc_hist    = new TH1F("emc_hist","E_{mc} from endcap to plug",100,0.,20.);
	TH1F *Erm_hist    = new TH1F("erm_hist","E_{rc}/E_{mc} from endcap to plug",200,0,3.);

	//look at each gamma
	for(int iEntry=0;iEntry<nEntry;iEntry++){

		//obtain entry of single event
		tree->GetEntry(iEntry);

		for(int i=0;i<ngammas;i++){

			bool isThetaPFO = false;
			bool isThetaMCR = false;
			float div       = 0;
			//isThetaPFO = (pfo_gamma_theta[i] > d_to_rad(9.3)) && (pfo_gamma_theta[i] < d_to_rad(12));
			//isThetaMCR = (mcr_gamma_theta[i] > d_to_rad(9.3)) && (mcr_gamma_theta[i] < d_to_rad(12));

			//if(isThetaPFO) Erc_hist->Fill(pfo_gamma_e[i]);
			//if(isThetaMCR) Emc_hist->Fill(mcr_gamma_e[i]);

			Erc_hist->Fill(pfo_gamma_e[i]);
			Emc_hist->Fill(mcr_gamma_e[i]);

			div = pfo_gamma_e[i]/mcr_gamma_e[i];
			Erm_hist->Fill(div);

		} // end of gammas

	} // end of iEntry

	/*
	int nbins_nom = Erc_hist->GetNbinsX();
	int nbins_den = Emc_hist->GetNbinsX();

	if(nbins_nom!=nbins_den){
		cout << ">>>> ERROR: unequal # of bins <<<<" << endl;
		return 1;
	}

	TH1F *nom = (TH1F*)Erc_hist->Clone();
	TH1F *den = (TH1F*)Emc_hist->Clone();

	nom->Reset();
	den->Reset();
	nom->Sumw2();
	den->Sumw2();
	*/
	
	c1->cd();
	gPad->SetGrid(); gPad->SetLogy();
	Erc_hist->Draw();

	c2->cd();
	gPad->SetGrid(); gPad->SetLogy();
	Emc_hist->Draw();

	c3->cd();
	gPad->SetGrid(); gPad->SetLogy();
	Erm_hist->Draw();



} // end of sqshape

float d_to_rad(float degree){
	float rad;
	rad = degree*M_PI/180;
	return rad;
}


